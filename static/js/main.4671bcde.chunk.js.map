{"version":3,"sources":["TimeSelector.js","ScheduleGenerator.js","ScheduleGeneratorRunner.js","App.js","serviceWorker.js","index.js","data/202103.csv"],"names":["useTimeSelector","defaultText","minTime","maxTime","interval","useState","time","setTime","options","i","push","value","key","onChange","event","target","defaultValue","useFullTimeSelector","hour","HourSelector","minute","MinuteSelector","getClassesArray","rawData","classes","whitelist","blacklist","classesArray","whitelistCourseIndexes","split","length","course","trim","outputData","lineString","j","undefined","indexOf","forEach","whitelistedCRN","whitelistCourseIndex","tempArray","classArray","sortForFitness","currentPop","sort","a","b","parseFloat","timeFitness","conflictCount","Schedule","crns","times","timeWeight","crnsWithTime","crnsWithTimeCoutner","k","getCRNsWithTime","timeData","maxTimeFitness","timeDataCounter","Set","getTimeData","conflicts","crnsLength","conflictCounter","getConflictFitness","this","splice","CRNs","debugText","scheduleGenetics","initPopSize","generations","initPopulation","uniqueCRN","uniqueCRNperClass","getUniqueCRN","tempCRN","Math","random","leastConflictIndex","leastConflicts","scheduleListBreeder","scheduleList1","scheduleList2","outputList","scheduleListGenetics","listCount","listArray","scheduler","term","pullAvailability","devString","fetch","dataPath","response","text","devStringSplit","finalScheduleList","request","DisplaySchedule","schedule","crnString","element","colorArray","daysOfTheWeek","colorDict","timeColumn","style","backgroundColor","timeRightSide","floor","timeString","borderTopString","borderBottomString","height","rowHeightNumber","textAlign","borderTop","borderBottom","position","paddingRight","dayColumns","tempColumn","courseBox","crnWithTime","courseStartTime","courseTimeRightSide","topOffset","boxHeight","boxContent","top","zIndex","border","width","paddingLeft","color","id","className","overflow","ScheduleGeneratorRunner","courses","startTime","endTime","map","s","tempDevString","ReactDOM","render","document","getElementById","scheduleWrapper","App","setCourses","StartTimeSelector","EndTimeSelector","setWhitelist","setBlacklist","setDebugText","devBool","setDevBool","setDevString","content","type","name","placeholder","onSubmit","preventDefault","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.4671bcde.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst useFullTimeSelector = () => {\r\n  const [hour, HourSelector] = useTimeSelector('hour', 5, 23, 1);\r\n  const [minute, MinuteSelector] = useTimeSelector('minute', 0, 60, 15);\r\n\r\n  const FullTimeSelectorMaker = () => (\r\n    <div>\r\n    <HourSelector />\r\n    <label> : </label>\r\n    <MinuteSelector />\r\n    </div>\r\n  );\r\n\r\n  return [hour + ':' + minute, FullTimeSelectorMaker];\r\n}\r\n\r\nconst useTimeSelector = (defaultText, minTime, maxTime, interval) => {\r\n  const [time, setTime] = useState('');\r\n\r\n  const options = [];\r\n\r\n  for(var i = minTime; i <= maxTime; i+= interval) {\r\n    options.push(<option value={i} key={i}>{i}</option>);\r\n  }\r\n\r\n  const TimeSelectorMaker = () => (\r\n    <select value={time} onChange={event => setTime(event.target.value)}>\r\n      <option defaultValue=\"\">{defaultText}</option>\r\n      {options}\r\n    </select>\r\n  );\r\n\r\n  return [time, TimeSelectorMaker];\r\n}\r\n\r\nexport default useFullTimeSelector;","import dataPath from './data/202103.csv';\r\n\r\nconst courseCodeIndex = 11;\r\nconst crnIndex = 0;\r\nconst startTimeIndex = 1;\r\nconst endTimeIndex = 10;\r\n/*const terms = [\r\n  [202101,\"Winter Quarter 2021\"]\r\n  [202010,\"Fall Quarter 2020\"],\r\n  [202001,\"Winter Quarter 2020\"],\r\n  [202003,\"Spring Quarter 2020\"]\r\n]*/\r\n\r\n//function that handles scheduling for one term\r\nconst scheduler = (classes, times, term, whitelist, blacklist, pullAvailability, debugText, devString) =>\r\n{\r\n  const request = async () => {\r\n    const response = await fetch(dataPath);\r\n    const rawData = await response.text();\r\n\r\n    let classesArray = getClassesArray(rawData, classes, whitelist, blacklist);\r\n\r\n    var initPopSize = 50;\r\n    var timeWeight = 1;\r\n    var generations = 10;\r\n    var listCount = 8; //try to keep list count even\r\n\r\n    if(devString !== '') {\r\n      let devStringSplit = devString.split(',');\r\n      initPopSize = devStringSplit[0].trim();\r\n      timeWeight = devStringSplit[1].trim();\r\n      generations = devStringSplit[2].trim();\r\n      listCount = devStringSplit[3].trim();\r\n    }\r\n\r\n    var finalScheduleList = scheduleListGenetics(classesArray,initPopSize,times,timeWeight,generations,listCount);\r\n    if(debugText) changeDebugText(finalScheduleList[0]);\r\n    return await finalScheduleList[0];\r\n  }\r\n\r\n  return request();\r\n}\r\n\r\n//takes in the raw data and the requested courses, then returns an array of 2D arrays of all possible classes of a course\r\nfunction getClassesArray(rawData, classes, whitelist, blacklist)\r\n{\r\n  var classesArray = [];\r\n  var whitelistCourseIndexes = [];\r\n  rawData = rawData.split('\\n');\r\n  for(var i = 0; i < classes.length; i++)\r\n  {\r\n    var course = classes[i].trim();\r\n    var outputData = [];\r\n\r\n    for(var j = 0; j < rawData.length; j++)\r\n    {\r\n      let lineString = rawData[j].split(',');\r\n      if(lineString[courseCodeIndex] !== undefined && lineString[courseCodeIndex].trim() === course.trim() && blacklist.indexOf(lineString[0]) < 0)\r\n      {\r\n        whitelist.forEach(whitelistedCRN => {\r\n          if(whitelistedCRN === lineString[crnIndex]) whitelistCourseIndexes.push(i);\r\n        });\r\n        outputData.push(lineString);\r\n      }\r\n    }\r\n    if(outputData.length === 0)\r\n    {\r\n      //something for when no classes are found\r\n    }\r\n    else classesArray[i] = outputData;\r\n  }\r\n\r\n  whitelistCourseIndexes.forEach(whitelistCourseIndex => {\r\n    var tempArray = [];\r\n    classesArray[whitelistCourseIndex].forEach(classArray => {\r\n      if(!(whitelist.indexOf(classArray[crnIndex]) < 0)) tempArray.push(classArray);\r\n    });\r\n    classesArray[whitelistCourseIndex] = tempArray;\r\n  });\r\n\r\n  return classesArray;\r\n}\r\n\r\n//takes the classesArray and returns a 2D array of each class and all unique CRN's of each course\r\nfunction getUniqueCRN(classesArray)\r\n{\r\n  var uniqueCRN = [];\r\n\r\n  for(var i = 0; i < classesArray.length; i++)\r\n  {\r\n    var uniqueCRNperClass = [];\r\n    for(var j = 0; j < classesArray[i].length; j++)\r\n    {\r\n      uniqueCRNperClass[j] = classesArray[i][j][crnIndex];\r\n    }\r\n    uniqueCRN[i] = [...new Set(uniqueCRNperClass)];\r\n  }\r\n  return uniqueCRN;\r\n}\r\n\r\n//returns all of the CRNs with their times and course codes from an array of CRNs\r\nfunction getCRNsWithTime(crns, classesArray)\r\n{\r\n  var crnsWithTime = [];\r\n  var crnsWithTimeCoutner = 0;\r\n\r\n  for(let i = 0; i < classesArray.length; i++)\r\n  {\r\n    for(let j = 0; j < classesArray[i].length; j++)\r\n    {\r\n      for(let k = 0; k < crns.length; k++)\r\n      {\r\n        if(classesArray[i][j][crnIndex] === crns[k])\r\n        {\r\n          crnsWithTime[crnsWithTimeCoutner] = classesArray[i][j];\r\n          crnsWithTimeCoutner++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return crnsWithTime;\r\n}\r\n\r\n//returns a given's schedule's time fitness\r\nfunction getTimeData(crnsWithTime, times, timeWeight)\r\n{\r\n  var maxTimeFitness = 0;\r\n  var timeFitness = 0;\r\n  var timeData = [];\r\n  let timeDataCounter = 0;\r\n\r\n  //just checks to see if any classes are above the max time or below the min time\r\n  for(let i = 0; i < crnsWithTime.length; i++)\r\n  {\r\n    for(let j = startTimeIndex; j <= endTimeIndex; j++)\r\n    {\r\n      if(crnsWithTime[i][j] !== 0)\r\n      {\r\n        if(crnsWithTime[i][j] > times[1] || crnsWithTime[i][j] < times[0])\r\n        {\r\n          timeFitness++;\r\n          timeDataCounter++;\r\n          timeData[timeDataCounter] = crnsWithTime[i][crnIndex];\r\n        }\r\n        maxTimeFitness++;\r\n      }\r\n    }\r\n  }\r\n\r\n  timeData[0] = (timeFitness / maxTimeFitness) * timeWeight;\r\n  timeData = [...new Set(timeData)];\r\n  return timeData;\r\n}\r\n\r\n//returns the number of conflicts in CRNS with time\r\nfunction getConflictFitness(crnsWithTime)\r\n{\r\n  var conflicts = [];\r\n  var crnsLength = [];\r\n  var conflictCounter = 0;\r\n\r\n  //makes an array of the lengths of the classes in CRNSwithTime\r\n  for(let i = 0; i < crnsWithTime.length; i++)\r\n  {\r\n    crnsLength[i] = [];\r\n    for(let j = startTimeIndex; j <= endTimeIndex; j+=2)\r\n    {\r\n      crnsLength[i][j] = crnsWithTime[i][j+1] - crnsWithTime[i][j];\r\n    }\r\n  }\r\n\r\n  //checks for conflicts\r\n  for(let i = 0; i < crnsWithTime.length; i++)\r\n  {\r\n    for(let j = 0; j < crnsWithTime.length; j++)\r\n    {\r\n      if(crnsWithTime[i][crnIndex] !== crnsWithTime[j][crnIndex])\r\n      {\r\n        for(let k = startTimeIndex; k <= endTimeIndex; k+=2)\r\n        {\r\n          if((crnsWithTime[i][k] - crnsWithTime[j][k] < crnsLength[j][k] && crnsWithTime[i][k] - crnsWithTime[j][k] >= 0) || (crnsWithTime[j][k] - crnsWithTime[i][k] < crnsLength[i][k] && crnsWithTime[j][k] - crnsWithTime[i][k] >= 0))\r\n          {\r\n            conflicts[conflictCounter] = crnsWithTime[i][crnIndex];\r\n            conflictCounter++;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return conflicts;\r\n}\r\n\r\nfunction sortForFitness(currentPop)\r\n{\r\n  currentPop.sort((a, b) => parseFloat(a.timeFitness) - parseFloat(b.timeFitness));\r\n  currentPop.sort((a, b) => parseFloat(a.conflictCount) - parseFloat(b.conflictCount));\r\n}\r\n\r\n//the schedule object, takes in classesArray, CRNs, times, to make a schedule object\r\nfunction Schedule(classesArray, crns, times, timeWeight)\r\n{\r\n  var crnsWithTime = getCRNsWithTime(crns, classesArray);\r\n  var timeData = getTimeData(crnsWithTime, times, timeWeight);\r\n  var conflicts = getConflictFitness(crnsWithTime)\r\n  this.conflicts = conflicts;\r\n  this.conflictCount = conflicts.length;\r\n  this.timeFitness = timeData[0];\r\n  this.timeData = timeData.splice(1);\r\n  this.CRNs = crns;\r\n  this.crnsWithTime = crnsWithTime;\r\n  this.debugText = false;\r\n}\r\n\r\n//function to change schedule's debug text to true\r\nfunction changeDebugText(schedule)\r\n{\r\n  schedule.debugText = true;\r\n}\r\n\r\n//runs a genetic algorithm for the schedules, returns an array of size initPopSize of theoretically good schedules after going through a bunch of generations\r\nfunction scheduleGenetics(classesArray, initPopSize, times, timeWeight, generations)\r\n{\r\n  var initPopulation = [];\r\n  var uniqueCRN = getUniqueCRN(classesArray);\r\n\r\n  //population initialization\r\n  for(let i = 0; i < initPopSize; i++)\r\n  {\r\n    let tempCRN = [];\r\n    for(let j = 0; j < uniqueCRN.length; j++)\r\n    {\r\n      tempCRN[j] = uniqueCRN[j][Math.random()*uniqueCRN[j].length | 0];\r\n    }\r\n    initPopulation[i] = new Schedule(classesArray,tempCRN,times,timeWeight);\r\n  }\r\n\r\n  sortForFitness(initPopulation);\r\n  var currentPop = initPopulation;\r\n\r\n  for(let i = 0; i < generations; i++)\r\n  {\r\n    let leastConflictIndex = 0;\r\n    let leastConflicts = currentPop[0].conflictCount;\r\n    while(leastConflictIndex < currentPop.length && currentPop[leastConflictIndex].conflictCount === leastConflicts)\r\n    {\r\n      leastConflictIndex++;\r\n    }\r\n    for(let j = leastConflictIndex; j < currentPop.length; j++)\r\n    {\r\n      let tempCRN = [];\r\n      for(let k = 0; k < uniqueCRN.length; k++)\r\n      {\r\n        tempCRN[k] = uniqueCRN[k][Math.random()*uniqueCRN[k].length | 0];\r\n      }\r\n      currentPop[j] = new Schedule(classesArray, tempCRN, times, timeWeight);\r\n    }\r\n    //[...new Map(currentPop.map(item => [item['CRNs'], item])).values()] //get rid of dupes i think\r\n    sortForFitness(currentPop);\r\n  }\r\n  //console.log(currentPop);\r\n  return currentPop;\r\n}\r\n\r\n//takes two schedule arrays and returns one that takes the best of both\r\nfunction scheduleListBreeder(scheduleList1, scheduleList2)\r\n{\r\n  var outputList = [];\r\n  for(let i = 0; i < scheduleList1.length/2; i++)\r\n  {\r\n    outputList.push(scheduleList1[i]);\r\n  }\r\n  for(let i = 0; i < scheduleList2.length/2; i++)\r\n  {\r\n    outputList.push(scheduleList2[i]);\r\n  }\r\n  sortForFitness(outputList);\r\n  return outputList;\r\n}\r\n\r\n//handles making schedule lists, returns a final good one\r\nfunction scheduleListGenetics(classesArray, initPopSize, times, timeWeight, generations, listCount)\r\n{\r\n  var listArray = [];\r\n  for(let i = 0; i < listCount; i++)\r\n  {\r\n    listArray[i] = scheduleGenetics(classesArray, initPopSize, times, timeWeight, generations);\r\n  }\r\n  while(listArray.length > 1)\r\n  {\r\n    let tempArray = [];\r\n    for(let i = 0; i < listArray.length; i+=2)\r\n    {\r\n      tempArray.push(scheduleListBreeder(listArray[i],listArray[i+1]));\r\n    }\r\n    listArray = tempArray;\r\n  }\r\n  return listArray[0];\r\n}\r\n\r\nexport default scheduler;","import scheduler from './ScheduleGenerator';\r\n\r\n//for the display\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './scheduledisplay.css'\r\n\r\nconst ScheduleGeneratorRunner = (courses, startTime, endTime, whitelist, blacklist, debugText, devString) => {\r\n    //turns the inputted time strings into the ints that the schedule generator uses\r\n    var times = [\r\n      startTime.split(':')[0] * 60 + startTime.split(':')[1], \r\n      endTime.split(':')[0] * 60 + endTime.split(':')[1]\r\n    ];\r\n\r\n    //splits the courses inputted to get a useable array\r\n    let classes = courses.split(',');\r\n\r\n    //input formatting for whitelist and blacklist\r\n    whitelist = whitelist.split(',');\r\n    blacklist = blacklist.split(',');\r\n    whitelist = whitelist.map(s => s.trim());\r\n    blacklist = blacklist.map(s => s.trim());\r\n\r\n    //runs the schedule generator in a wrapper async function to wait for the promise\r\n    const scheduleWrapper = async () => {\r\n        let tempDevString = '';\r\n        if(devString !== '') tempDevString = devString;\r\n        let schedule = await scheduler(classes, times, 202010, whitelist, blacklist, false, debugText, tempDevString);\r\n        //console.log(schedule);\r\n        ReactDOM.render(\r\n            <DisplaySchedule schedule={schedule} />,\r\n            document.getElementById('output')\r\n        );\r\n    }\r\n\r\n    scheduleWrapper();\r\n}\r\n\r\nconst DisplaySchedule = (schedule) => {\r\n\r\n    let crnString = '';\r\n    schedule.schedule.CRNs.forEach(element => {\r\n        crnString += element + \", \";\r\n    });\r\n\r\n    if(schedule.schedule.debugText) crnString += \" Conflicts: \" + schedule.schedule.conflictCount + \" Time Fitness: \" + schedule.schedule.timeFitness;\r\n\r\n    const colorArray = [\r\n        \"Aquamarine\",\r\n        \"Beige\",\r\n        \"LightBlue\",\r\n        \"LightCyan\",\r\n        \"Cornsilk\",\r\n        \"LightSkyBlue\"\r\n    ];\r\n\r\n    const daysOfTheWeek = [\r\n        \"Monday\",\r\n        \"Tuesday\",\r\n        \"Wednesday\",\r\n        \"Thursday\",\r\n        \"Friday\"\r\n    ];\r\n\r\n    const hourBorderStyle = '1px solid black';\r\n    const halfHourBorderStyle = '1px dotted black';\r\n\r\n    const backgroundColor = \"#212121\";\r\n    const headerColor = \"#3d3d3d\";\r\n    const courseFontColor = \"#1a1a1a\";\r\n\r\n    const rowHeightNumber = 18;\r\n    const rowHeight = rowHeightNumber + \"px\";\r\n\r\n    let colorDict = {};\r\n\r\n    for(let i = 0; i < schedule.schedule.CRNs.length; i++) {\r\n        colorDict[schedule.schedule.CRNs[i]] = colorArray[i];\r\n    }\r\n\r\n    //the column for time\r\n    let timeColumn = [];\r\n    timeColumn.push(\r\n        <div style={{backgroundColor: headerColor}}>\r\n            Time\r\n        </div>\r\n    )\r\n    for(let i = 300; i <= 1410; i += 30) {\r\n        let timeRightSide = (i - Math.floor(i/60)*60)/10;\r\n        let timeString = Math.floor(i/60) + \":\" + timeRightSide + \"0\";\r\n\r\n        let borderTopString = '';\r\n        let borderBottomString = '';\r\n\r\n        if(timeRightSide === 0) \r\n        {\r\n            borderTopString = hourBorderStyle;\r\n            borderBottomString = halfHourBorderStyle;\r\n        }\r\n        else timeString = '';\r\n\r\n        timeColumn.push(\r\n            <div style={{height: rowHeight, textAlign: \"right\", borderTop: borderTopString, borderBottom: borderBottomString, position: \"relative\", paddingRight: \"2%\"}}> { timeString } </div>\r\n        );\r\n    }\r\n\r\n    //the columns for the days of the week\r\n    let dayColumns = [];\r\n    for(let j = 0; j < 5; j++) {\r\n        let tempColumn = [];\r\n\r\n        tempColumn.push(\r\n            <div style={{backgroundColor: headerColor}}>\r\n                { daysOfTheWeek[j] }\r\n            </div>\r\n        )\r\n        \r\n        for(let i = 300; i <= 1410; i += 30) {\r\n            let timeRightSide = (i - Math.floor(i/60)*60)/10;\r\n            //let timeString = Math.floor(i/60) + \":\" + timeRightSide + \"0\";\r\n\r\n            let borderTopString = '';\r\n            let borderBottomString = '';\r\n            if(timeRightSide === 0) \r\n            {\r\n            borderTopString = hourBorderStyle;\r\n            borderBottomString = halfHourBorderStyle;\r\n            }\r\n\r\n            let courseBox = '';\r\n\r\n            schedule.schedule.crnsWithTime.forEach(crnWithTime => {\r\n                let courseStartTime = crnWithTime[1 + (j * 2)];\r\n                if (courseStartTime - i >= 0 && courseStartTime - i < 30) {\r\n                    let courseTimeRightSide = (courseStartTime - Math.floor(courseStartTime/60)*60)/10;\r\n                    let topOffset = '';\r\n                    if(timeRightSide === 3) topOffset = ((courseTimeRightSide - 3) * rowHeightNumber / 3) + \"px\";\r\n                    else topOffset = (courseTimeRightSide * rowHeightNumber / 3) + \"px\";\r\n                    let boxHeight = ((crnWithTime[2 + (j * 2)] - courseStartTime) / 30 * rowHeightNumber);\r\n\r\n                    let boxContent = crnWithTime[11] + \" - \" + crnWithTime[0];\r\n                    if (boxHeight < rowHeightNumber) boxContent = '';\r\n\r\n                    courseBox = (\r\n                        <div style={{position: \"absolute\", backgroundColor: colorDict[crnWithTime[0]], top: topOffset, zIndex: \"10\", border: \"1px solid black\", height: boxHeight + \"px\", width: \"85%\", paddingLeft: \"2.5%\", paddingRight: \"2.5%\"}}>\r\n                            { boxContent }\r\n                        </div>\r\n                    );\r\n                }\r\n            });\r\n\r\n            tempColumn.push(\r\n                <div style={{height: rowHeight, borderTop: borderTopString, borderBottom: borderBottomString, position: \"relative\", paddingLeft: \"5%\", paddingRight: \"5%\", color: courseFontColor}}> \r\n                    { courseBox }\r\n                </div>\r\n            );\r\n        }\r\n\r\n        dayColumns.push(\r\n            <div id={daysOfTheWeek[j] + \"-column\" } className=\"display-column\" style={{width: \"17.8%\"}}>\r\n                { tempColumn }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <p>CRNs: { crnString }</p>\r\n        <div id=\"week-display-container\" style={{width: \"70%\", backgroundColor: backgroundColor, overflow: \"auto\", height: \"600px\"}}>\r\n            <div id=\"time-column\" className=\"display-column\" style={{width: \"9%\"}}>\r\n                { timeColumn }\r\n            </div>\r\n            { dayColumns }\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ScheduleGeneratorRunner;","import React, { useState } from 'react';\nimport useFullTimeSelector from './TimeSelector';\nimport ScheduleGeneratorRunner from './ScheduleGeneratorRunner';\n\nconst App = () => {\n  const [courses, setCourses] = useState('');\n  const [startTime, StartTimeSelector] = useFullTimeSelector();\n  const [endTime, EndTimeSelector] = useFullTimeSelector();\n  const [whitelist, setWhitelist] = useState('');\n  const [blacklist, setBlacklist] = useState('');\n  const [debugText, setDebugText] = useState(false);\n  const [devBool, setDevBool] = useState(false); //the boolean of whether or not the dev string input should be revealed\n  const [devString, setDevString] = useState(''); //the string for developer inputs\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    let tempDevString = '';\n\n    if(devBool) tempDevString = devString;\n\n    ScheduleGeneratorRunner(courses, startTime, endTime, whitelist, blacklist, debugText, tempDevString);\n  }\n\n  const content = devBool\n    ? <div>\n      <input\n        type='text'\n        name='dev'\n        placeholder=''\n        value={devString}\n        onChange={event => setDevString(event.target.value)}\n      />\n      </div>\n    : null;\n\n\treturn (\n    <form onSubmit={handleSubmit}>\n      <p>Enter the course codes of the classes you wish to take, each seperated by a comma.</p>\n      <input\n        type='text'\n        id='input'\n        name='courses'\n        placeholder='EX: MAT 021B, PHY 009A, CHE 002A'\n        value={courses}\n        onChange={event => setCourses(event.target.value)}\n      />\n      <p>CRN Whitelist</p>\n      <input\n        type='text'\n        id='input'\n        name='whitelist'\n        placeholder='EX: 38618'\n        value={whitelist}\n        onChange={event => setWhitelist(event.target.value)}\n      />\n      <p>CRN Blacklist</p>\n      <input\n        type='text'\n        id='input'\n        name='blacklist'\n        placeholder='EX: 38618'\n        value={blacklist}\n        onChange={event => setBlacklist(event.target.value)}\n      />\n      <p>Minimum Class Time</p>\n      <StartTimeSelector />\n      <p>Maximum Class Time</p>\n      <EndTimeSelector />\n      <br/>\n      <p>Experimental Features</p>\n      <label className='checkmarkContainer'>\n        <input\n          type='checkbox'\n          id='debugText'\n          name='debugText'\n          value={debugText}\n          onChange={event => setDebugText(!debugText)}\n        />Enable Debug Text\n        <span className='checkmark'></span>\n      </label>\n      <label className='checkmarkContainer'>\n        <input\n          type='checkbox'\n          id='devBool'\n          name='devBool'\n          value={debugText}\n          onChange={event => setDevBool(!devBool)}\n        />Enable Dev Input\n        <span className='checkmark'></span>\n      </label>\n      { content }\n      <br/>\n      <input\n        type='submit'\n        value='Submit'\n      />\n    </form>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/202103.1fd33ee3.csv\";"],"sourceRoot":""}